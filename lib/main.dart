import 'package:flutter/material.dart';
import 'package:flutter_foreground_task/flutter_foreground_task.dart';
import 'package:flutter_pcm_sound/flutter_pcm_sound.dart';
import 'package:shared_preferences/shared_preferences.dart';

import 'package:frame_msg/rx/audio.dart';
import 'package:frame_msg/rx/photo.dart';
import 'package:simple_frame_app/simple_frame_app.dart';

import 'gemini_realtime.dart';
import 'services/vector_db_service.dart';
import 'foreground_service.dart';
import 'objectbox.g.dart';   // generated by ObjectBox

// ────────────────────────────── init ────────────────────────────────────────
late Store store;

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  FlutterForegroundTask.initCommunicationPort();
  store = await openStore();
  initializeForegroundService();

  runApp(const MainApp());
}

// ────────────────────────────── widget ──────────────────────────────────────
class MainApp extends StatefulWidget {
  const MainApp({super.key});
  @override
  State<MainApp> createState() => MainAppState();
}

class MainAppState extends State<MainApp> with SimpleFrameAppState {
  // ── services ───────────────────────────────────────────────────────────
  late final VectorDbService _vectorDb;
  late final GeminiRealtime   _gemini;

  // ── receivers reserved for Phase 5 ─────────────────────────────────────
  // ignore: unused_field
  final RxAudio _rxAudio = RxAudio(streaming: true);
  // ignore: unused_field
  final RxPhoto _rxPhoto = RxPhoto(quality: 'VERY_HIGH', resolution: 720);

  // ── UI state ────────────────────────────────────────────────────────────
  final _apiKeyCtrl = TextEditingController();
  final _systemCtrl = TextEditingController();
  final _events     = <String>[];
  final _scroll     = ScrollController();

  // ───────────────────── lifecycle ────────────────────────────────────────
  @override
  void initState() {
    super.initState();
    _bootstrap();
  }

  Future<void> _bootstrap() async {
    await _loadPrefs();

    _vectorDb = VectorDbService(_log)..initialize();
    _gemini   = GeminiRealtime(_audioReady, _log);

    await _configurePcm();
    await startForegroundService();

    tryScanAndConnectAndStart(andRun: true);   // from SimpleFrameAppState
  }

@override
Future<void> dispose() async {
  _gemini.disconnect();              // no await → returns void
  await FlutterPcmSound.release();   // Future<void>
  await _vectorDb.dispose();         // Future<void> after the fix above
  store.close();
  super.dispose();
}

  // ────────────────── SimpleFrameApp hooks ───────────────────────────────
  @override
  Future<void> run() async => _log('Run pressed (stream start)');
  @override
  Future<void> cancel() async => _log('Cancel pressed (stream stop)');

  // ────────────────── Audio plumbing ─────────────────────────────────────
  Future<void> _configurePcm() async {
    const sr = 24000;
    await FlutterPcmSound.setup(sampleRate: sr, channelCount: 1);
    FlutterPcmSound.setFeedThreshold(sr ~/ 30);
    FlutterPcmSound.setFeedCallback(_onFeed);
    FlutterPcmSound.start();
  }

  void _audioReady() => _onFeed(0);

  Future<void> _onFeed(int _) async {
    while (_gemini.hasResponseAudio()) {
      final bytes = _gemini.getResponseAudioByteData();
      if (bytes.lengthInBytes == 0) break;

      final samples = bytes.buffer.asInt16List();
      await FlutterPcmSound.feed(PcmArrayInt16.fromList(samples));
    }
  }

  // ────────────────── prefs ──────────────────────────────────────────────
  Future<void> _loadPrefs() async {
    final p = await SharedPreferences.getInstance();
    setState(() {
      _apiKeyCtrl.text = p.getString('api_key') ?? '';
      _systemCtrl.text = p.getString('system_instruction') ?? '';
    });
  }

  // ────────────────── UI helpers ─────────────────────────────────────────
  void _log(String msg) {
    setState(() => _events.add(msg));
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_scroll.hasClients) {
        _scroll.jumpTo(_scroll.position.maxScrollExtent);
      }
    });
  }

  // ────────────────── build ──────────────────────────────────────────────
  @override
  Widget build(BuildContext context) {
    return WithForegroundTask(
      child: MaterialApp(
        theme: ThemeData.dark(),
        home: Scaffold(
          appBar: AppBar(title: const Text('Frame Realtime Demo')),
          body: ListView(
            padding: const EdgeInsets.all(16),
            children: [
              TextField(
                controller: _apiKeyCtrl,
                decoration: const InputDecoration(labelText: 'Gemini API key'),
              ),
              const SizedBox(height: 12),
              TextField(
                controller: _systemCtrl,
                maxLines: 2,
                decoration:
                    const InputDecoration(labelText: 'System instruction'),
              ),
              const SizedBox(height: 12),
              Row(
                children: [
                  ElevatedButton(onPressed: run,    child: const Text('Run')),
                  const SizedBox(width: 12),
                  ElevatedButton(onPressed: cancel, child: const Text('Stop')),
                ],
              ),
              const Divider(),
              Text('Events', style: Theme.of(context).textTheme.titleLarge),
              SizedBox(
                height: 200,
                child: Scrollbar(
                  controller: _scroll,
                  child: ListView.builder(
                    controller: _scroll,
                    itemCount: _events.length,
                    itemBuilder: (_, i) => Text(_events[i]),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
